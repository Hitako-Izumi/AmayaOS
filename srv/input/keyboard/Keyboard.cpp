/*
 * Copyright (C) 2009 Niek Linnenbank, 2016, 2017 Daniel Martín
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <API/ProcessCtl.h>
#include <Macros.h>
#include <Error.h>
#include <Config.h>
#include "Keyboard.h"

#define F1_KEY 0x3B
#define SHIFT_PRESSED 0x2a
#define SHIFT_RELEASED 0xaa
#define DIACRITIC_KEY_PRESSED 0xA8
#define DIAERESIS_KEY_PRESSED 0xE0

/**
 * Temporary hardcoded keyboard map, from kb.c in SkelixOS.
 * @see http://www.skelix.org
 */
/**
 * 0x3A - Caps/Mayus
 * 0x3B - F1
 * 0x3C - F2
 * 0x3D - F3
 * 0x3E - F4
 * 0x3F - F5
 * 0x40 - F6
 * 0x41 - F7
 * 0x42 - F8
 * 0x43 - F9
 * 0x44 - F10
 * 0x57 - F11
 * 0x58 - F12
 * 0x48 - Up/Arriba
 * 0x4B - Left/Izquierda
 * 0x4D - Right/Derecha
 * 0x50 - Down/Abajo
 * 0x52 - INS
 * 0x53 - Del/Supr
 */

const char Keyboard::keymap[0x80][8] =
{
    /*00*/{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 	 	  {'1', '!', '|', 173, 0x0, 0x0, 0x0, 0x0}, {'2', '"', '@', 172, 0x0, 0x0, 0x0, 0x0},
    /*04*/{'3', 250, '#', 156, 0x0, 0x0, 0x0, 0x0}, {'4', '$', '~', '$', 0x0, 0x0, 0x0, 0x0},
	  {'5', '%', 171, 243, 0x0, 0x0, 0x0, 0x0}, {'6', '&', 170, 243, 0x0, 0x0, 0x0, 0x0},
    /*08*/{'7', '/', '{', 243, 0x0, 0x0, 0x0, 0x0}, {'8', '(', '[', 0x0, 0x0, 0x0, 0x0, 0x0}, 
	  {'9', ')', ']', ')', 0x0, 0x0, 0x0, 0x0}, {'0', '=', '}', 248, 0x0, 0x0, 0x0, 0x0},
    /*0c*/{'\'', '?', '\\', 173, 0x0, 0x0, 0x0, 0x0}, {173, 168, '~', '~', 0x0, 0x0, 0x0, 0x0}, 
	  {'\b','\b', '\b', '\b', 0x0,0x0, 0x0,0x0},{'\t','\t', '\t', '\t',0x0,0x0, 0x0, 0x0},
    /*10*/{'q', 'Q', '@', 0x0, 0x0, 0x0, 0x0, 0x0}, {'w', 'W', 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
	  {'e', 'E', 238, 155, 130, 144, 137, 0x0}, {'r', 'R', 183, 0x0, 0x0, 0x0, 0x0, 0x0},
    /*14*/{'t', 'T', 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {'y', 'Y', 174, 157, 0x0, 0x0, 0x0, 0x0}, 
	  {'u', 'U', 31, 30, 163, 0x0, 129, 154}, {'i', 'I', 175, 0x0, 161, 161, 139, 139},
    /*18*/{'o', 'O', 155, 234, 162, 0x0, 0x0, 153}, {'p', 'P', 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
	  {'`', '^', '[', 0x0, 0x0, 0x0, 0x0, 0x0}, {'+', '*', ']', 0x0, 0x0, 0x0, 0x0, 0x0},
    /*1c*/{'\n','\n', '\n', '\n', 0x0, 0x0, 0x0, 0x0},{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
	  {'a', 'A', 145, 146, 160, 0x0, 132, 142}, {'s', 'S', 225, 0x0, 0x0, 0x0, 0x0, 0x0},
    /*20*/{'d', 'D', 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {'f', 'F', 0x0, 166, 0x0, 0x0, 0x0, 0x0}, 
	  {'g', 'G', 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {'h', 'H', 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
    /*24*/{'j', 'J', 'j', 'J', 0x0, 0x0, 0x0, 0x0}, {'k', 'K', 'k', '&', 0x0, 0x0, 0x0, 0x0}, 
	  {'l', 'L', 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {164, 165, '~', '~', '"', 0x0, 0x0, 0x0},
    /*28*/{0x0, 0x0, '{', '{', 0x0, 0x0, 0x0, 0x0},{167, 166, '\\', '\\', 0x0, 0x0, 0x0, 0x0}, 
	  {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {'Ç','Ç', '}', 0x0, 0x0, 0x0, 0x0, 0x0},
    /*2c*/{'z', 'Z', 174, '<', 0x0, 0x0, 0x0, 0x0}, {'x', 'X', 175, '>', 0x0, 0x0, 0x0, 0x0}, 
	  {'c', 'C', 155, 0x0, 0x0, 0x0, 0x0, 0x0}, {'v', 'V', '"', '\'', 0x0, 0x0, 0x0, 0x0},
    /*30*/{'b', 'B', '"', '\'', 0x0, 0x0, 0x0, 0x0}, {'n', 'N', 'n', 'N', 0x0, 0x0, 0x0, 0x0}, 
	  {'m', 'M', 230, 167, 0x0, 0x0, 0x0, 0x0}, {',', ';', 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
    /*34*/{'.', ':', 250, 246, 0x0, 0x0, 0x0, 0x0}, {'-', '_', 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
	  {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {'*', '*', '*', '*', 0x0, 0x0, 0x0, 0x0},
    /*38*/{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {' ', ' ', ' ', ' ', 0x0, 0x0, 0x0, 0x0}, 
	  {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
    /*3C*/{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
	  {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
    /*40*/{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
	  {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
    /*44*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {'7', 0x0, 0x0},
    /*48*/{'8', 0x0, 0x0}, {'9', 0x0, 0x0}, {'-', '-', '-'}, {'4', 0x0, 0x0},
    /*4C*/{'5', 0x0, 0x0}, {'6', 0x0, 0x0}, {'+', '+', '+'}, {'1', 0x0, 0x0},
    /*50*/{'2', 0x0, 0x0}, {'3', 0x0, 0x0}, {'0', 0x0, 0x0}, {'.', '.', '.'},
    /*54*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {'<', '>', '|'}, {0x0, 0x0, 0x0},
    /*58*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*5C*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*60*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*64*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*68*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*6C*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*70*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*74*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*78*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*7C*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
};

Keyboard::Keyboard() : modifierKey(ZERO)
{
}

Error Keyboard::initialize()
{
    return ProcessCtl(SELF, AllowIO,  PS2_PORT);
}

Error Keyboard::interrupt(Size vector)
{
    pending = true;
    return ESUCCESS;
}

Error Keyboard::read(s8 *buffer, Size size, Size offset)
{
    /* Do we have any new key events? */
    if (pending)
    {
	pending = false;
    
	/*
         * Read byte from the keyboard.
         */
        u8 keycode = inb(PS2_PORT);

        /* Update shift state. */
        if (keycode == SHIFT_PRESSED || keycode == SHIFT_RELEASED)
        {
		(modifierKey % 2 != 0)
		? modifierKey-- : modifierKey++;
	}
	else if (modifierKey == NO_MODIFIER_KEY && keycode == DIACRITIC_KEY_PRESSED) {
		modifierKey = DIACRITIC_KEY;
	}
	else if (modifierKey == SHIFT_KEY && keycode == DIACRITIC_KEY_PRESSED) {
		modifierKey = DIAERESIS_KEY_SHIFT;
	}
	else if (modifierKey <= ALT_GR_SHIFT_KEY && keycode == DIAERESIS_KEY_PRESSED) {
		modifierKey = (modifierKey >= ALT_GR_KEY) ? modifierKey -= 2 : modifierKey += 2;
	}
	else if (keycode == F1_KEY) {
		modifierKey = NO_MODIFIER_KEY;
	}
        /* Don't do anything on release. */
	else if (!(keycode & PS2_RELEASE) &&
	          (keymap[keycode & 0x7f][modifierKey]))
	{
		/* Write to buffer. */
		buffer[0] = keymap[keycode & 0x7f][modifierKey];
		if (modifierKey >= DIACRITIC_KEY) {
			modifierKey = (modifierKey % 2 != 0) ? SHIFT_KEY : NO_MODIFIER_KEY;
		}
    		return 1;
	}
	else if (modifierKey >= DIACRITIC_KEY) {
		modifierKey = (modifierKey % 2 != 0) ? SHIFT_KEY : NO_MODIFIER_KEY;
	}
    }
    return EAGAIN;
}
