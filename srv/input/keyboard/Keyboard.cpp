/*
 * Copyright (C) 2009 Niek Linnenbank, 2016 Dan Rulos.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <API/ProcessCtl.h>
#include <Macros.h>
#include <Error.h>
#include <Config.h>
#include "Keyboard.h"

/**
 * Temporary hardcoded keyboard map, from kb.c in SkelixOS.
 * @see http://www.skelix.org
 */
/**
 * 0x3A - Caps/Mayus
 * 0x3B - F1
 * 0x3C - F2
 * 0x3D - F3
 * 0x3E - F4
 * 0x3F - F5
 * 0x40 - F6
 * 0x41 - F7
 * 0x42 - F8
 * 0x43 - F9
 * 0x44 - F10
 * 0x57 - F11
 * 0x58 - F12
 * 0x48 - Up/Arriba
 * 0x4B - Left/Izquierda
 * 0x4D - Right/Derecha
 * 0x50 - Down/Abajo
 * 0x52 - INS
 * 0x53 - Del/Supr
 */

const char Keyboard::keymap[0x80][3] =
{
    /*00*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {'1', '!', '|'}, {'2', '"', '@'}, 
    /*04*/{'3', 250, '#'}, {'4', '$', '~'}, {'5', '%', 171}, {'6', '&', 170}, 
    /*08*/{'7', '/', '{'}, {'8', '(', '['}, {'9', ')', ']'}, {'0', '=', '}'},
    /*0c*/{'\'', '?', '\\'}, {173, 168, '~'}, {'\b','\b', '\b'},{'\t','\t', '\t'},
    /*10*/{'q', 'Q', '@'}, {'w', 'W', 0x0}, {'e', 'E', 0x0}, {'r', 'R', 0x0},
    /*14*/{'t', 'T', 0x0}, {'y', 'Y', 0x0}, {'u', 'U', 0x0}, {'i', 'I', 0x0},
    /*18*/{'o', 'O', 0x0}, {'p', 'P', 0x0}, {'`', '^', '['}, {'+', '*', ']'},
    /*1c*/{'\n','\n', '\n'},{0x0, 0x0, 0x0}, {'a', 'A', 0x0}, {'s', 'S', 0x0},
    /*20*/{'d', 'D', 0x0}, {'f', 'F', 0x0}, {'g', 'G', 0x0}, {'h', 'H', 0x0},
    /*24*/{'j', 'J', 0x0}, {'k', 'K', 0x0}, {'l', 'L', 0x0}, {164, 165, '~'},
    /*28*/{'{','{', '{'},{167, 166, '\\'}, {0x0, 0x0, 0x0}, {'Ç','Ç', '}'}, 
    /*2c*/{'z', 'Z', 0x0}, {'x', 'X', 0x0}, {'c', 'C', 0x0}, {'v', 'V', 0x0}, 
    /*30*/{'b', 'B', 0x0}, {'n', 'N', 0x0}, {'m', 'M', 0x0}, {',', ';', 0x0},
    /*34*/{'.', ':', 0x0}, {'-', '_', 0x0}, {0x0, 0x0, 0x0}, {'*', '*', '*'},
    /*38*/{0x0, 0x0, 0x0}, {' ', ' ', ' '}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*3C*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*40*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*44*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*48*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {'\a', '\a', '\a'},
    /*4C*/{0x0, 0x0, 0x0}, {'\f', '\f', '\f'}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*50*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*54*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {'<', '>', '|'}, {0x0, 0x0, 0x0},
    /*58*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*5C*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*60*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*64*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*68*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*6C*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*70*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*74*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*78*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
    /*7C*/{0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0}, {0x0, 0x0, 0x0},
};

Keyboard::Keyboard() : modifierKey(ZERO)
{
}

Error Keyboard::initialize()
{
    return ProcessCtl(SELF, AllowIO,  PS2_PORT);
}

Error Keyboard::interrupt(Size vector)
{
    pending = true;
    return ESUCCESS;
}

Error Keyboard::read(s8 *buffer, Size size, Size offset)
{
    /* Do we have any new key events? */
    if (pending)
    {
	pending = false;
    
	/*
         * Read byte from the keyboard.
         */
        u8 keycode = inb(PS2_PORT);

        /* Update shift state. */
        if (modifierKey != ALT_GR_KEY && (keycode == 0x2a || keycode == 0xaa))
        {
    		if (modifierKey == SHIFT_KEY) {
			modifierKey = NO_MODIFIER_KEY;
		}
		else if (modifierKey == NO_MODIFIER_KEY) {
			modifierKey = SHIFT_KEY;
		}
	}
	else if (modifierKey != SHIFT_KEY && keycode == 0xE0) {
		if (modifierKey == ALT_GR_KEY) {
			modifierKey = NO_MODIFIER_KEY;
		}
		else if (modifierKey == NO_MODIFIER_KEY) {
			modifierKey = ALT_GR_KEY;
		}
	}
        /* Don't do anything on release. */
	else if (!(keycode & PS2_RELEASE) &&
	          (keymap[keycode & 0x7f][modifierKey]))
	{
	    /* Write to buffer. */
	    buffer[0] = keymap[keycode & 0x7f][modifierKey];
    	    return 1;
	}
    }
    return EAGAIN;
}
